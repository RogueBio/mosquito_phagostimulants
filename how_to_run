## Step 1: QC with FastQC

# Directory containing the raw data
raw_data_dir="/home/ar9416e/mosquito_phagostimulants/raw_data/raw_files"
ls "$raw_data_dir"

# Set Internal Field Separator (IFS) to newline to handle filenames with spaces
IFS=$'\n'

# Find all FASTQ files recursively in subdirectories
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))

# Save the list to a file
printf "%s\n" "${fastq_files[@]}" > fastq_files

# Count files
echo "Found ${#fastq_files[@]} FASTQ files."

# Submit the SLURM job array
num_files=${#fastq_files[@]}
echo "Submitting job array for $num_files files..."
sbatch --array=0-$(($num_files - 1)) /home/ar9416e/git_repos/mosquito_phagostimulants/fastqc.sh

## Step 2: Trimming poly-tails with cutadapt

##Submitting a job for cutadapt (DO NOT USE UNLESS SURE OF WHAT REMOVING)

sbatch --array=0-46 git_repos/mosquito_sex/cutadapt_polya.sh

## Step 2: Trimming with Trimmomatic
raw_data_dir="/home/ar9416e/mosquito_phagostimulants/trimmed_reads/trimmed_cutadapt"
export raw_data_dir

# Check directory contents
ls "$raw_data_dir"

# Use newline separator for safety
IFS=$'\n'

# Count all FASTQs
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))
echo "Found ${#fastq_files[@]} FASTQ files in total."

# Find paired FASTQs (_1 / _2 naming)
R1_files=($(find "$raw_data_dir" -type f -name '*_1.fq.gz' ! -name '._*' | sort))
R2_files=($(find "$raw_data_dir" -type f -name '*_2.fq.gz' ! -name '._*' | sort))

echo "Number of R1 files: ${#R1_files[@]}"
echo "Number of R2 files: ${#R2_files[@]}"

# Guard: make sure counts match
if [[ ${#R1_files[@]} -ne ${#R2_files[@]} ]]; then
  echo "Error: mismatch in R1 and R2 file counts!"
  exit 1
fi

# Submit SLURM job array
num_files=${#R1_files[@]}
echo "Submitting job array for $num_files paired files..."
sbatch --array=0-$(($num_files - 1)) git_repos/mosquito_phagostimulants/trimmomatic_array.sh


## Step 3: QC with FastQC (Post-trimming)

# Directory containing the raw data
export raw_data_dir="/home/ar9416e/mosquito_sex/trimmed_reads_polyA"
ls "$raw_data_dir"

# Set Internal Field Separator (IFS) to newline to handle filenames with spaces
IFS=$'\n'

# Find all .fastq files in the raw_data directory and its subdirectories
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))

# Write them to a file
printf "%s\n" "${fastq_files[@]}" > fastq_files

# Output the number of files found
echo "Found ${#fastq_files[@]} FASTQ files."

# Submit the SLURM job array
num_files=${#fastq_files[@]}
echo "Submitting job array for $num_files files..."
sbatch --array=0-$(($num_files - 1)) git_repos/mosquito_sex/fastqc_array_2.sh

## Step 4: Salmon Alignment

## 4.1. Generating a decoy-aware transcriptome

# Directory containing the reference genome 
ref_genome_dir="/home/ar9416e/git_repos/Reference_genome"

# Directory containing the reference transcripts data
transcripts_dir="/home/ar9416e/git_repos/Reference_genome"

# Extract chromosome information from the genome file to make the decoys.txt file
grep "^>" "$ref_genome_dir/VectorBase-68_AgambiaePEST_Genome.fasta" | cut -d " " -f 1 > decoys.txt

# Check
head decoys.txt

# Remove the > symbol from the file
sed -i.bak -e 's/>//g' decoys.txt

# Check
head decoys.txt

# Combine the transcripts and genome file, in this order!
cat "$transcripts_dir/VectorBase-68_AgambiaePEST_AnnotatedTranscripts.fasta" "$ref_genome_dir/VectorBase-68_AgambiaePEST_Genome.fasta" > trans_and_gen.fa.gz

# Load required modules
module load Salmon/1.10.1-GCC-12.3.0
module load gzip

# Set desired output directory
index_dir="/home/ar9416e/mosquito_sex/alignments/salmon_index"

# Create it if it doesn't exist
mkdir -p "$index_dir"

# Run salmon index with decoy-aware transcriptome
salmon index -t trans_and_gen.fa.gz -d decoys.txt -p 30 -i "$index_dir"

#Step 5: Run alignment with Salmon

# Set path to salmon index (make sure the index directory is used)
salmon_index="/home/ar9416e/mosquito_sex/alignments/salmon_index"

# Trimmed fastq file folder
TRIM_DATA_DIR="/home/ar9416e/mosquito_sex/trimmed_reads_polyA"

# Check for both R1 and R2 FASTQ files with updated pattern
R1_files=($(find "$TRIM_DATA_DIR" -type f -name '*R1*_paired.fastq.gz'))
R2_files=($(find "$TRIM_DATA_DIR" -type f -name '*R2*_paired.fastq.gz'))
num_files=${#R1_files[@]}

# Debug: Print the numbers of files found
echo "Number of R1 files: ${#R1_files[@]}"
echo "Number of R2 files: ${#R2_files[@]}"

# Export variables so that they are accessible by the job script
export R1_files
export R2_files
export salmon_index

# You can also export any other variables needed in salmon_alignment.sh, e.g.:
export output_dir="/home/ar9416e/mosquito_sex/alignments"

# Submit the SLURM job array for paired files
echo "Submitting job array for $num_files paired files..."
sbatch --array=0-$(($num_files - 1)) /home/ar9416e/git_repos/mosquito_sex/salmon_alignment.sh

# Get % mapped reads
for d in *_quant; do
  log_file="$d/logs/salmon_quant.log"
  if [[ -f "$log_file" ]]; then
    rate=$(grep "Mapping rate" "$log_file" | awk -F'= ' '{print $2}')
    echo "$d: $rate"
  else
    echo "$d: log file not found"
  fi
done > percentage_mapped
# filepath: /home/ar9416e/mosquito_sex/alignments/extract_mapping_rates.sh
